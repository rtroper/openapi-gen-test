# coding: utf-8

"""
    OpenAPI for NCATS Biomedical Translator Reasoners

    OpenAPI for NCATS Biomedical Translator Reasoners  # noqa: E501

    The version of the OpenAPI document: 0.9.2
    Contact: edeutsch@systemsbiology.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Result(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_bindings': 'dict(str, list[NodeBinding])',
        'edge_bindings': 'dict(str, list[EdgeBinding])'
    }

    attribute_map = {
        'node_bindings': 'node_bindings',
        'edge_bindings': 'edge_bindings'
    }

    def __init__(self, node_bindings=None, edge_bindings=None, local_vars_configuration=None):  # noqa: E501
        """Result - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._node_bindings = None
        self._edge_bindings = None
        self.discriminator = None

        self.node_bindings = node_bindings
        self.edge_bindings = edge_bindings

    @property
    def node_bindings(self):
        """Gets the node_bindings of this Result.  # noqa: E501

        List of QNode-KNode bindings.  # noqa: E501

        :return: The node_bindings of this Result.  # noqa: E501
        :rtype: dict(str, list[NodeBinding])
        """
        return self._node_bindings

    @node_bindings.setter
    def node_bindings(self, node_bindings):
        """Sets the node_bindings of this Result.

        List of QNode-KNode bindings.  # noqa: E501

        :param node_bindings: The node_bindings of this Result.  # noqa: E501
        :type: dict(str, list[NodeBinding])
        """
        if self.local_vars_configuration.client_side_validation and node_bindings is None:  # noqa: E501
            raise ValueError("Invalid value for `node_bindings`, must not be `None`")  # noqa: E501

        self._node_bindings = node_bindings

    @property
    def edge_bindings(self):
        """Gets the edge_bindings of this Result.  # noqa: E501

        List of QEdge-KEdge bindings.  # noqa: E501

        :return: The edge_bindings of this Result.  # noqa: E501
        :rtype: dict(str, list[EdgeBinding])
        """
        return self._edge_bindings

    @edge_bindings.setter
    def edge_bindings(self, edge_bindings):
        """Sets the edge_bindings of this Result.

        List of QEdge-KEdge bindings.  # noqa: E501

        :param edge_bindings: The edge_bindings of this Result.  # noqa: E501
        :type: dict(str, list[EdgeBinding])
        """
        if self.local_vars_configuration.client_side_validation and edge_bindings is None:  # noqa: E501
            raise ValueError("Invalid value for `edge_bindings`, must not be `None`")  # noqa: E501

        self._edge_bindings = edge_bindings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Result):
            return True

        return self.to_dict() != other.to_dict()
